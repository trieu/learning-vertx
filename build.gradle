/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    
    // https://mvnrepository.com/artifact/io.vertx/vertx-core
	compile group: 'io.vertx', name: 'vertx-core', version: '3.5.4'
	// https://mvnrepository.com/artifact/io.vertx/vertx-web
	compile group: 'io.vertx', name: 'vertx-web', version: '3.5.4'
	
    

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

tasks.withType(Jar) {
	destinationDir = file("$rootDir/BUILD-OUTPUT")
}

def getClasspathStringJars() {
	def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }
    
    def classpath = fileNames.join(" ; ")    
    return '. ; ' + classpath + ' ; '
}

task BuildHttpStarter(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'learning-starter'
    manifest {
   		attributes ('Implementation-Title': 'TestHttpServer', 
        			'Implementation-Version': version ,
        			'Main-Class': ' learning.TestHttpServer',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
}

// copy dependency libs
task CopyRuntimeLibsFolderToBUILD(type: Copy) {  
  into "BUILD-OUTPUT/deps"  
  from configurations.compile  
}

// copy templates
task CopyViewFolderToBUILD(type: Copy) {  
  into "BUILD-OUTPUT/view"  
  from files('view')
}

